#summary Motivation

= Background  =

Immediately after releasing the original muParser I occasionally received questions regarding support for arrays, strings and complex numbers in muParser. Since muParser has certain limitations due to its design i started to work on a successor of muParser. I released a first version of what would become muParserX in 2006. Since at that time i planned to replace muParser with the new version in the long term. I called this new version muParser 2. However i soon realized that a lot of people actually liked muParser for what it was: pretty fast and easy to use. Most people didn't even notice its shortcomings and were happy with it. By now the original library has been downloaded more than 20000 times. This number is way to high to drastically change it's API. For me this was a dilemma since i couldn't abandon the original muParser, it had become to popular. The original idea of imposing a feature freeze on muParser and concentrating fully on it's successor was no longer a viable option. In fact muParser has now itself reached Version 2.0.0 and the last major improvements were added only a few months ago. Consequently I stopped working on muParserX for years but i never completely abandoned it. 

However in the meantime it turned out that i could use muParserX to test new features and so i did. muParserX became my testbed for new features a playground were i could test things without having to care for a large existing userbase. The if-then-else conditionals were first added to muParserX and later backported to muParser. In addition to that i added optional support for complex numbers something which the original muParser never could handle very well and finally i added support for arrays which turned into fully fledged matrix support with the most recent version. I finally had created a new math expression parser and called it muParserX. Originally "X" was supposed to be a placeholder for a final version number but now but i'd like to see it standing for "experimental" or "extended".

= Future Plans =

I have recently heard of a study finding that people who publicly talk about their plans are less likely to actually implement them. So no details here but i can tell you the obvious:
muParserX has now a great framework and a lot of built in functions however it is lacking a lot of functions when it comes to dealing with matrices. It has the framework and basic support but's pretty much it so there is plenty or room for improvement. This is however a lot of work and if you happen to use muParserX and added functions yourself i would like to hear from you...