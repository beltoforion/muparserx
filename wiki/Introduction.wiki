#summary muParserX a mathematical expression parser with support for multiple data types
#sidebar TableOfContents

= Introduction =
The evaluation of a mathematical expression is a standard task required in many applications. It can be solved by either using a standard math expression parser such as muParser or by embedding a scripting language such as Lua. There are however some limitations: Although muParser is pretty fast it will only work with scalar values and although Lua is very flexible it does neither support binary operators for arrays nor complex numbers. So if you need a math expression parser with support for arrays, matrices and strings muParserX may be able to help you. It is based on the original muParser engine but has evolved into a standalone project ever since. 

<table border="1">
  <tr>
    <th rowspan="2" >Parser</th>
    <th colspan="4" align="center">Data types</th>
    <th rowspan="2">Precision</th>
    <th colspan="3" align="center">User defined operators</th>
    <th colspan="2" align="center">User defined functions</th>
    <th rowspan="2" align="center">Localization</th>
    <th rowspan="2">Licence</th>
    <th rowspan="2" align="center">Performance (Expr. per second)</th>
  </tr> 
  <tr>
    <th>complex</th>   
    <th>scalar</th>
    <th>string</th>       
    <th>vector</th>
    <th>Binary</th> 
    <th>Postfix</th>  
    <th>Infix</th>
    <th>Strings as parameters</th> 
    <th align="center">Arbitrary number of parameters</th>
  </tr>

  <tr>
    <td><a href="http://muparser.sourceforge.net/">muParser</a></td>
    <td align="center"><img src="http://beltoforion.de/muparserx/fail_ok.png"/>(1)</td> 
    <td align="center"><img src="http://beltoforion.de/muparserx/ok.png"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail_ok.png"/>(2)</td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png"/></td>
    <td align="center" ><b>double</b></td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td>

    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td>
    <td align="center"><a href="http://www.opensource.org/licenses/mit-license.php">MIT</a></td>
    <td align="center">~ 10.000.000</td>
  </tr>
  <tr>
    <td><a href="http://beltoforion.de/muparsersse/math_expression_compiler_en.html">muParserSSE</a></td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png"/></td>

    <td align="center" ><b>float</b></td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png" alt="fail"/></td>
    <td align="center" >max. 10</td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>
    <td align="center"><a href="http://www.opensource.org/licenses/mit-license.php">MIT</a></td>
    <td align="center">~ 20.000.000</td>
  </tr>
  <tr>
    <td><a href="http://beltoforion.de/muparserx/math_expression_parser_en.html">muParserX</a></td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>    
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>    
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>    
    <td align="center" ><b>double</b></td>
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>    
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td> 
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>

    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/ok.png" alt="ok"/></td>   
    <td align="center" ><img src="http://beltoforion.de/muparserx/fail.png"  alt="fail"/></td>
    <td align="center"><a href="http://opensource.org/licenses/BSD-3-Clause">BSD New</a></td>
    <td align="center">~ 1.600.000</td>
  </tr>
</table>
*Table 1:* Feature comparison with other derivatives of muParser. ({{{*}}} Average performance calculated using <a href="http://beltoforion.de/muparserx/bench_expr.txt">this set of expressions</a>; (1) muParser comes with an implementation for complex numbers but this is rather limited and more of a hack; (2) muParser can define strings but only as constants.) 

= Features =
 * Supported data types: double, integer, complex, boolean, string, array
 * Extensible with custom operators (binary, infix or postfix)
 * Extensible with custom functions with an arbitrary number of function arguments
 * Support for an unlimited number of variables and constants
 * No limit on expression complexity
 * Reads binary, hexadecimal, complex, integer and string values from expressions and can be extended to read user defined values as well.
 * Supports a large variety of predefined operators, functions and constants.
 * Written in standard compliant C++ code with no external dependencies.

== Predefined Constants ==
By default the parser supports the following mathematical constants:
    * The eulerian number with: *e = 2.718281828459045235360287*
    * Pi with *pi = 3.141592653589793238462643*
    * The imaginary unit with: *i = sqrt(-1)*

== Binary and ternary operators: ==
    * Standard operators: *+, -, *, /, ^*
    * Assignment operators: *=*, *+=*, *-=*, **=*, */=*
    * Logical operators: *and*, *or*, *xor*,*==*, *!=*, *>*, *<*, *<=*, *>=*
    * Bit manipulation: *&*, *|*, *<<*, *>>*
    * String concatenation: *//*
    * if then else conditionals with lazy evaluation: *?:*

== Postfix operators ==
    * Unit postfixes (nano, micro, milli, kilo, giga, mega): *{n}*, *{mu}*, *{m}*, *{k}*, *{G}*, *{M}*

== Infix operators ==
    * Sign operator and type conversions: *-*, *(float)*, *(int)*
== Special Operators ==
    * Multidimensional index operator: a{{{[}}}1,2{{{]}}}
    * Ternary if-then-else operator: (a<b) ? c:d
== Predefined Functions ==
    * Standard functions *abs*, *sin*, *cos*, *tan*, *sinh*, *cosh*, *tanh*, *ln*, *log*, *log10*, *exp*, *sqrt*
    * Unlimited number of arguments: *min*, *max*, *sum*
    * String functions: *str2dbl*, *strlen*, *toupper*
    * Complex functions: *real*, *imag*, *conj*, *arg*, *norm*
    * Array functions: *sizeof*

= Sample expressions =
The next table shows samples of expressions that can be evaluated using <b>muParserX</b>:

||*Expression*     ||*Result*     ||*Explanation*||
||"hello"=="world" ||false        ||Comparing strings||
||"hello "//"world"||"hello world"||String concatanation operator||
||sin(a+8i)        ||...          ||Support for a variety of predefined functions working with complex numbers.||
||va{{{[}}}3{{{]}}}+vb{{{[}}}5{{{]}}}||...||Support for array variables||
||va{{{[}}}3{{{]}}}=9||...||Assignment operator in combination with indexed access to a vector||
||toupper("hello"//"world")||"HELLOWORLD"||Transforming a concatenated string to uppercase.||
||#010010||18||Interpreting binary values||
||0x1eff||7935||Interpreting hex values||
||#10>0x1eff||false||Comparing binary and hex values||
||1+2-3*4/5^6||2.99923||The standard operators||
||a = ((a<b) ? 10 : -10)||10 or -10 depending on a and b||Ternary operator for if-then-else conditionals||